<UserControl x:Class="ToDoApplication.Views.NewTaskView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:parent="clr-namespace:ToDoApplication"
             xmlns:local="clr-namespace:ToDoApplication.Views"
             xmlns:variables="clr-namespace:ToDoApplication.VariableControllers"
             xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" xmlns:viewmodels="clr-namespace:ToDoApplication.ViewModels"
             mc:Ignorable="d" Style="{StaticResource WidgetTemplate}" Background="{DynamicResource widgetColor}"
             FontFamily="{DynamicResource Nunito}"
             d:DesignWidth="1920"
             d:DesignHeight="1080">
    <UserControl.Resources>
        <FrameworkElement x:Key="PE" x:Name="ProxyElement" Visibility="Collapsed" DataContext="{Binding}"/>
        <!-- Define ControlTemplate for Dropdown Button -->
        <ControlTemplate x:Key="DropDownButtonTemplate" TargetType="ToggleButton">
            <Grid Width="Auto" Height="Auto">
                <!-- Dot representation -->
                <Rectangle x:Name="Dot" Fill="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"
                           RadiusX="10" RadiusY="10" Width="Auto" Height="20"
                           RenderTransformOrigin="0,0.5">
                    <Rectangle.RenderTransform>
                        <ScaleTransform/>
                    </Rectangle.RenderTransform>
                </Rectangle>
                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10,0,10,0"/>
            </Grid>
            <ControlTemplate.Triggers>
                <EventTrigger RoutedEvent="MouseEnter">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Dot" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="MouseLeave">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Dot" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0.9" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <EventTrigger RoutedEvent="MouseDown">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Dot" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
                <Trigger Property="ToggleButton.IsMouseOver" Value="True">
                    <Setter Property="Content">
                        <!-- Bind the Content to the selected status text -->
                        <Setter.Value>
                            <Binding Path="SelectedStatus.statusText" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="IsChecked" Value="True">
                    <Setter TargetName="Dot" Property="Width" Value="Auto"/>
                    <Setter TargetName="Dot" Property="Height" Value="20"/>
                    <Setter Property="Content">
                        <!-- Bind the Content to the selected status text -->
                        <Setter.Value>
                            <Binding Path="SelectedStatus.statusText" />
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <DataTemplate x:Key="StepEntryTemplate">
            <Grid HorizontalAlignment="Stretch" Margin="10">
                <Rectangle Fill="{DynamicResource selectableColor}" RadiusX="10" RadiusY="10"/>
                <xctk:WatermarkTextBox Watermark="New step..."
                     Foreground="{DynamicResource textColor}"
                     HorizontalAlignment="Stretch" VerticalAlignment="Center"
                     FontSize="10" Margin="10,5,5,5" Background="Transparent"
                     BorderThickness="0" x:Name="StepEntry">    
                    <xctk:WatermarkTextBox.InputBindings>
                        <KeyBinding Command="{Binding DataContext.addStep, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" CommandParameter="{Binding ElementName=StepEntry}" Key="Return"/>
                    </xctk:WatermarkTextBox.InputBindings>
                </xctk:WatermarkTextBox>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="StepItemTemplate">
            <!-- Done Checkmark -->
            <Grid Width="20" Height="20" Margin="10,5,5,5">
                <Ellipse Fill="White" Stroke="Black" StrokeThickness="1">
                    <Ellipse.InputBindings>
                        <MouseBinding MouseAction="LeftClick" Command="{Binding DataContext.toggleDone, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}"/>
                        <!-- Turns task done -->
                    </Ellipse.InputBindings>
                </Ellipse>
                <Path Data="M0,7 L5,12 L13,0" Stroke="Black" StrokeThickness="2"
              HorizontalAlignment="Center" VerticalAlignment="Center"
              Visibility="{Binding Done, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Path.InputBindings>
                        <MouseBinding MouseAction="LeftClick" Command="{Binding DataContext.toggleDone, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" CommandParameter="{Binding}"/>
                        <!-- Turns task done -->
                    </Path.InputBindings>
                </Path>
            </Grid>
        </DataTemplate>

        <variables:StepTemplateSelector x:Key="StepSelector"
                                        StepEntryTemplate="{StaticResource StepEntryTemplate}"
                                        StepItemTemplate="{StaticResource StepItemTemplate}"/>
    </UserControl.Resources>

    <Grid Margin="20">

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="1.5*"/>
            <ColumnDefinition Width="1.5*"/>
            <ColumnDefinition Width="1.5*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="10*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Task Name -->
        <xctk:WatermarkTextBox x:Name="TaskName" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" FontSize="50" HorizontalAlignment="Left" Background="Transparent" BorderThickness="0" Watermark="ToDo Name.." Foreground="{DynamicResource textColor}" Text="{Binding TaskName, UpdateSourceTrigger=PropertyChanged}"/>

        <!-- Status Dropdown -->
        <ToggleButton x:Name="DropDownButton" Margin="10" Grid.Column="3" Grid.Row="1" VerticalAlignment="Center" HorizontalAlignment="Left" IsHitTestVisible="{Binding ElementName=StatusPopup, Path=IsOpen, Mode=OneWay, Converter={StaticResource BoolInverter}}">
            <ToggleButton.Style>
                <Style TargetType="ToggleButton">
                    <Setter Property="Template" Value="{StaticResource DropDownButtonTemplate}"/>
                    <Setter Property="Foreground" Value="{DynamicResource textColor}"/>
                    <Setter Property="FontSize" Value="10"/>
                    <Setter Property="Background">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource StringToColorConverter}">
                                <Binding Path="DataContext.SelectedStatus.colorValue" RelativeSource="{RelativeSource AncestorType=UserControl}"/>
                                <!-- Add more bindings if needed -->
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ToggleButton.Style>
        </ToggleButton>

        <!-- Define Popup for Dropdown Items -->
        <Popup x:Name="StatusPopup" Placement="Bottom" PlacementTarget="{Binding ElementName=DropDownButton}" StaysOpen="False" IsOpen="{Binding IsChecked, ElementName=DropDownButton}" AllowsTransparency="True">
            <ListView ItemsSource="{Binding StatusList, Mode=TwoWay}" SelectedItem="{Binding SelectedStatus}" Foreground="{StaticResource textColor}" Background="Transparent" BorderThickness="0">
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Margin" Value="0,3,3,3"/>
                        <Setter Property="FontSize" Value="10"/>
                        <Setter Property="Height" Value="20"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListViewItem">
                                    <Grid>
                                        <Rectangle Fill="{Binding colorValue}" RadiusX="10" RadiusY="10" Width="{Binding ActualWidth, ElementName=TextBlockStatusText}" HorizontalAlignment="Left"/>
                                        <TextBlock x:Name="TextBlockStatusText" Text="{Binding statusText}" Padding="10,0,10,0" HorizontalAlignment="Left" VerticalAlignment="Center" Width="Auto" Foreground="{DynamicResource textColor}"/>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ListView.ItemContainerStyle>
            </ListView>
        </Popup>

        <!-- Description -->
        <Label Grid.Row="2" Grid.Column="1" Content="Description:" FontSize="35" HorizontalAlignment="Left" VerticalAlignment="Bottom" Foreground="{DynamicResource textColor}"/>
        <xctk:WatermarkTextBox Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="2" Margin="5" TextWrapping="Wrap" FontSize="20" 
                                SpellCheck.IsEnabled="True" Language="en-US" Style="{DynamicResource NoMouseOverTextBox}"
                                BorderBrush="{DynamicResource widgetColor}" Background="{DynamicResource selectableColor}" Text="{Binding Description, UpdateSourceTrigger=PropertyChanged}"/>

        <!-- Steps -->
        <Label Grid.Row="2" Grid.Column="3" Content="Steps:" FontSize="30" HorizontalAlignment="Center" VerticalAlignment="Bottom" Foreground="{DynamicResource textColor}"/>
        <ListBox Grid.Row="3" Grid.Column="3" Margin="5" Background="Transparent" BorderBrush="Transparent" />

        <!-- Button to save task -->
        <Button Grid.Row="4" Grid.Column="2" Content="💾" Margin="5" FontSize="45" Style="{DynamicResource RoundButton}" Width="100" HorizontalAlignment="Right" Command="{Binding SaveTaskCommand}"/>
        <!-- Button to remove task -->
        <Button Grid.Row="4" Grid.Column="3" Content="🗑" Margin="5" FontSize="45" Style="{DynamicResource RoundButton}" Width="100" HorizontalAlignment="Left" Command="{Binding RemoveTaskCommand}"/>
    </Grid>
</UserControl>
